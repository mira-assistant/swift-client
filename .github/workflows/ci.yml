name: Mira Swift Client CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: macos-14

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Select Xcode version
      run: |
        # List available Xcode versions
        ls /Applications/ | grep Xcode || echo "No Xcode apps found"
        
        # Try to use Xcode 15.2, fall back to 15.0, then any available
        if [ -d "/Applications/Xcode_15.2.app" ]; then
          sudo xcode-select -s /Applications/Xcode_15.2.app/Contents/Developer
          echo "Using Xcode 15.2"
        elif [ -d "/Applications/Xcode_15.0.app" ]; then
          sudo xcode-select -s /Applications/Xcode_15.0.app/Contents/Developer  
          echo "Using Xcode 15.0"
        elif [ -d "/Applications/Xcode.app" ]; then
          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
          echo "Using default Xcode"
        else
          echo "No suitable Xcode found"
          exit 1
        fi

    - name: Install XcodeGen
      run: |
        brew install xcodegen

    - name: Generate Xcode project
      run: |
        echo "Generating Xcode project with XcodeGen..."
        xcodegen generate
        echo "Project generation completed"
        ls -la *.xcodeproj 2>/dev/null || echo "No .xcodeproj found"

    - name: List available schemes
      run: |
        echo "Available schemes:"
        xcodebuild -project swift-client.xcodeproj -list 2>/dev/null || echo "Could not list schemes"

    - name: Show Xcode version
      run: xcodebuild -version

    - name: Show available simulators
      run: xcrun simctl list devices available

    - name: Find available iOS simulator
      id: find-simulator
      run: |
        echo "Available devices:"
        xcrun simctl list devices available
        
        # Try to find a specific iPhone first, trim whitespace
        SIMULATOR=$(xcrun simctl list devices available | grep -E "iPhone [0-9]+" | head -1 | sed -E 's/.*iPhone ([0-9]+).*/iPhone \1/' | xargs)
        
        # If no specific iPhone found, try any iPhone, trim whitespace
        if [ -z "$SIMULATOR" ]; then
          SIMULATOR=$(xcrun simctl list devices available | grep -E "\s+iPhone" | head -1 | sed -E 's/.*\s+(iPhone[^(]*[^[:space:]]).*/\1/' | xargs)
        fi
        
        # If still no iPhone, try any iOS device, trim whitespace
        if [ -z "$SIMULATOR" ]; then
          echo "No iPhone simulators found, trying any iOS device"
          SIMULATOR=$(xcrun simctl list devices available | grep -E "iOS [0-9]" | head -1 | sed -E 's/.*\s+([^(]*[^[:space:]]).*/\1/' | xargs)
        fi
        
        # Final fallback - use first available device, trim whitespace
        if [ -z "$SIMULATOR" ]; then
          echo "No specific iOS devices found, using first available device"
          SIMULATOR=$(xcrun simctl list devices available | grep -E "\s+[A-Za-z]" | head -1 | sed -E 's/.*\s+([^(]*[^[:space:]]).*/\1/' | xargs)
        fi
        
        if [ -z "$SIMULATOR" ]; then
          echo "No simulators found at all!"
          exit 1
        fi
        
        echo "Selected simulator: '$SIMULATOR'"
        echo "simulator=$SIMULATOR" >> $GITHUB_OUTPUT

    - name: Clean build folder
      run: xcodebuild clean -project swift-client.xcodeproj -scheme swift-client

    - name: Build for testing
      run: |
        xcodebuild build \
          -project swift-client.xcodeproj \
          -scheme swift-client \
          -destination "platform=iOS Simulator,name=${{ steps.find-simulator.outputs.simulator }}" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          VALIDATE_DEVELOPMENT_ASSET_PATHS=NO

    - name: Archive build outputs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-outputs
        path: |
          ~/Library/Developer/Xcode/DerivedData/*/Build/Products/
        retention-days: 1

  build:
    name: Build
    runs-on: macos-14

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Select Xcode version
      run: |
        # List available Xcode versions
        ls /Applications/ | grep Xcode || echo "No Xcode apps found"
        
        # Try to use Xcode 15.2, fall back to 15.0, then any available
        if [ -d "/Applications/Xcode_15.2.app" ]; then
          sudo xcode-select -s /Applications/Xcode_15.2.app/Contents/Developer
          echo "Using Xcode 15.2"
        elif [ -d "/Applications/Xcode_15.0.app" ]; then
          sudo xcode-select -s /Applications/Xcode_15.0.app/Contents/Developer  
          echo "Using Xcode 15.0"
        elif [ -d "/Applications/Xcode.app" ]; then
          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
          echo "Using default Xcode"
        else
          echo "No suitable Xcode found"
          exit 1
        fi

    - name: Install XcodeGen
      run: |
        brew install xcodegen

    - name: Generate Xcode project
      run: |
        echo "Generating Xcode project with XcodeGen..."
        xcodegen generate
        echo "Project generation completed"
        ls -la *.xcodeproj 2>/dev/null || echo "No .xcodeproj found"

    - name: List available schemes
      run: |
        echo "Available schemes:"
        xcodebuild -project swift-client.xcodeproj -list 2>/dev/null || echo "Could not list schemes"

    - name: Find available iOS simulator
      id: find-simulator
      run: |
        echo "Available devices:"
        xcrun simctl list devices available
        
        # Try to find a specific iPhone first, trim whitespace
        SIMULATOR=$(xcrun simctl list devices available | grep -E "iPhone [0-9]+" | head -1 | sed -E 's/.*iPhone ([0-9]+).*/iPhone \1/' | xargs)
        
        # If no specific iPhone found, try any iPhone, trim whitespace
        if [ -z "$SIMULATOR" ]; then
          SIMULATOR=$(xcrun simctl list devices available | grep -E "\s+iPhone" | head -1 | sed -E 's/.*\s+(iPhone[^(]*[^[:space:]]).*/\1/' | xargs)
        fi
        
        # If still no iPhone, try any iOS device, trim whitespace
        if [ -z "$SIMULATOR" ]; then
          echo "No iPhone simulators found, trying any iOS device"
          SIMULATOR=$(xcrun simctl list devices available | grep -E "iOS [0-9]" | head -1 | sed -E 's/.*\s+([^(]*[^[:space:]]).*/\1/' | xargs)
        fi
        
        # Final fallback - use first available device, trim whitespace
        if [ -z "$SIMULATOR" ]; then
          echo "No specific iOS devices found, using first available device"
          SIMULATOR=$(xcrun simctl list devices available | grep -E "\s+[A-Za-z]" | head -1 | sed -E 's/.*\s+([^(]*[^[:space:]]).*/\1/' | xargs)
        fi
        
        if [ -z "$SIMULATOR" ]; then
          echo "No simulators found at all!"
          exit 1
        fi
        
        echo "Selected simulator: '$SIMULATOR'"
        echo "simulator=$SIMULATOR" >> $GITHUB_OUTPUT

    - name: Build for iOS Simulator
      run: |
        xcodebuild build \
          -project swift-client.xcodeproj \
          -scheme swift-client \
          -destination "platform=iOS Simulator,name=${{ steps.find-simulator.outputs.simulator }}" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          VALIDATE_DEVELOPMENT_ASSET_PATHS=NO

    - name: Build for iOS Device (if possible)
      run: |
        xcodebuild build \
          -project swift-client.xcodeproj \
          -scheme swift-client \
          -destination 'generic/platform=iOS' \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
      continue-on-error: true

  lint:
    name: Swift Lint
    runs-on: macos-14

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install SwiftLint
      run: |
        brew install swiftlint

    - name: Run SwiftLint
      run: |
        swiftlint --config .swiftlint.yml || echo "SwiftLint config not found, using defaults"
        swiftlint lint --reporter github-actions-logging
      continue-on-error: true